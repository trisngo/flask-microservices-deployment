trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '13d97069-c665-412f-9742-5d549eb9fd4b'
  containerRegistry: 'tringo.azurecr.io'
  imageRepository0: 'frontend'
  dockerfilePath0: '$(Build.SourcesDirectory)/frontend/Dockerfile'
  imageRepository1: 'order-service'
  dockerfilePath1: '$(Build.SourcesDirectory)/order-service/Dockerfile'
  imageRepository2: 'product-service'
  dockerfilePath2: '$(Build.SourcesDirectory)/product-service/Dockerfile'
  imageRepository3: 'user-service'
  dockerfilePath3: '$(Build.SourcesDirectory)/user-service/Dockerfile'
  tag: '$(Build.BuildId)'

  imagePullSecret: 'tringoarc-auth'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: CmdLine@2
      displayName: Add Database URL to .env
      env:
        DB_URL: $(dbCredUrl)
      inputs:
        script: |
          echo DB_URL=\"$DB_URL\" | tee -a $(Build.SourcesDirectory)/order-service/.env
          echo DB_URL=\"$DB_URL\" | tee -a $(Build.SourcesDirectory)/product-service/.env
          echo DB_URL=\"$DB_URL\" | tee -a $(Build.SourcesDirectory)/user-service/.env
    - task: Docker@2
      displayName: Build and push an image $(imageRepository0) to container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository0)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath0)'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build and push an image $(imageRepository1) to container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository1)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath1)'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build and push an image $(imageRepository2) to container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository2)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath2)'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build and push an image $(imageRepository3) to container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository3)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath3)'
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/deploy/aks'
        artifact: 'manifests'
        publishLocation: 'pipeline'
- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  variables:
    replica-no: 1
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'trisngoflaskmicroservicesdeployment.default'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download Manifests
            inputs:
              buildType: 'current'
              artifactName: 'manifests'
              targetPath: '$(Pipeline.Workspace)/manifests'
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'
          - task: replacetokens@5
            displayName: Replace Token
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/manifests'
              targetFiles: '**/*.yaml'
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'continue'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/frontend-deployment.yaml
                $(Pipeline.Workspace)/manifests/ingress-service.yaml
                $(Pipeline.Workspace)/manifests/mysql-deployment.yaml
                $(Pipeline.Workspace)/manifests/mysql-secret.yaml
                $(Pipeline.Workspace)/manifests/order-deployment.yaml
                $(Pipeline.Workspace)/manifests/product-deployment.yaml
                $(Pipeline.Workspace)/manifests/user-deployment.yaml
              containers: |
                $(containerRegistry)/$(imageRepository0):$(tag)
                $(containerRegistry)/$(imageRepository1):$(tag)
                $(containerRegistry)/$(imageRepository2):$(tag)
                $(containerRegistry)/$(imageRepository3):$(tag)
              imagePullSecrets: '$(imagePullSecret)'